import 'package:flutter/material.dart';
import '../models/label.dart';
import '../services/label_service.dart';

class LabelSelector extends StatefulWidget {
  final List<Label> selectedLabels;
  final Function(List<Label>) onLabelsChanged;
  final bool allowCreateNew;

  const LabelSelector({
    super.key,
    required this.selectedLabels,
    required this.onLabelsChanged,
    this.allowCreateNew = true,
  });

  @override
  State<LabelSelector> createState() => _LabelSelectorState();
}

class _LabelSelectorState extends State<LabelSelector> {
  final LabelService _labelService = LabelService();
  final TextEditingController _searchController = TextEditingController();
  final TextEditingController _newLabelController = TextEditingController();
  List<Label> _availableLabels = [];
  List<Label> _filteredLabels = [];
  bool _isLoading = true;
  bool _showCreateNew = false;

  @override
  void initState() {
    super.initState();
    _loadLabels();
    _searchController.addListener(_filterLabels);
  }

  @override
  void dispose() {
    _searchController.dispose();
    _newLabelController.dispose();
    super.dispose();
  }

  Future<void> _loadLabels() async {
    try {
      await _labelService.loadLabels();
      setState(() {
        _availableLabels = _labelService.labels;
        _filteredLabels = _availableLabels;
        _isLoading = false;
      });
    } catch (e) {
      setState(() {
        _isLoading = false;
      });
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Failed to load labels: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  void _filterLabels() {
    setState(() {
      _filteredLabels = _labelService.searchLabels(_searchController.text);
      _showCreateNew =
          _searchController.text.isNotEmpty &&
          !_availableLabels.any(
            (label) =>
                label.name.toLowerCase() ==
                _searchController.text.toLowerCase(),
          );
    });
  }

  void _toggleLabel(Label label) {
    setState(() {
      if (widget.selectedLabels.any((l) => l.id == label.id)) {
        widget.onLabelsChanged(
          widget.selectedLabels.where((l) => l.id != label.id).toList(),
        );
      } else {
        widget.onLabelsChanged([...widget.selectedLabels, label]);
      }
    });
  }

  Future<void> _createNewLabel() async {
    if (_newLabelController.text.trim().isEmpty) return;

    try {
      final newLabel = Label(
        id: '', // Will be generated by Supabase
        name: _newLabelController.text.trim(),
        createdAt: DateTime.now(),
      );

      final createdLabel = await _labelService.addLabel(newLabel);

      setState(() {
        _availableLabels.add(createdLabel);
        _filteredLabels = _labelService.searchLabels(_searchController.text);
        _showCreateNew = false;
        _newLabelController.clear();
      });

      // Auto-select the newly created label
      widget.onLabelsChanged([...widget.selectedLabels, createdLabel]);
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Failed to create label: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        // Selected Labels Display
        if (widget.selectedLabels.isNotEmpty) ...[
          const Text(
            'Selected Labels',
            style: TextStyle(
              color: Colors.white,
              fontSize: 16,
              fontWeight: FontWeight.w600,
            ),
          ),
          const SizedBox(height: 8),
          Wrap(
            spacing: 8,
            runSpacing: 8,
            children: widget.selectedLabels.map((label) {
              return Container(
                padding: const EdgeInsets.symmetric(
                  horizontal: 12,
                  vertical: 6,
                ),
                decoration: BoxDecoration(
                  color: label.color != null
                      ? Color(label.color!)
                      : Colors.blue.withOpacity(0.2),
                  borderRadius: BorderRadius.circular(16),
                  border: Border.all(
                    color: label.color != null
                        ? Color(label.color!)
                        : Colors.blue,
                    width: 1,
                  ),
                ),
                child: Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Text(
                      label.name,
                      style: TextStyle(
                        color: label.color != null ? Colors.white : Colors.blue,
                        fontSize: 12,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                    const SizedBox(width: 4),
                    GestureDetector(
                      onTap: () => _toggleLabel(label),
                      child: Icon(
                        Icons.close,
                        size: 16,
                        color: label.color != null ? Colors.white : Colors.blue,
                      ),
                    ),
                  ],
                ),
              );
            }).toList(),
          ),
          const SizedBox(height: 16),
        ],

        // Search Field
        TextFormField(
          controller: _searchController,
          decoration: const InputDecoration(
            border: OutlineInputBorder(),
            hintText: 'Search labels...',
            hintStyle: TextStyle(color: Colors.white54),
            contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 16),
            prefixIcon: Icon(Icons.search, color: Colors.white54),
          ),
          style: const TextStyle(color: Colors.white),
        ),
        const SizedBox(height: 16),

        // Labels List
        if (_isLoading)
          const Center(child: CircularProgressIndicator())
        else if (_filteredLabels.isEmpty && !_showCreateNew)
          const Center(
            child: Text(
              'No labels found',
              style: TextStyle(color: Colors.white54),
            ),
          )
        else
          Container(
            height: 200,
            decoration: BoxDecoration(
              border: Border.all(color: Colors.grey.shade700),
              borderRadius: BorderRadius.circular(8),
            ),
            child: ListView.builder(
              itemCount: _filteredLabels.length + (_showCreateNew ? 1 : 0),
              itemBuilder: (context, index) {
                if (index == _filteredLabels.length && _showCreateNew) {
                  return _buildCreateNewLabelItem();
                }

                final label = _filteredLabels[index];
                final isSelected = widget.selectedLabels.any(
                  (l) => l.id == label.id,
                );

                return ListTile(
                  leading: Container(
                    width: 20,
                    height: 20,
                    decoration: BoxDecoration(
                      color: label.color != null
                          ? Color(label.color!)
                          : Colors.blue,
                      shape: BoxShape.circle,
                    ),
                  ),
                  title: Text(
                    label.name,
                    style: const TextStyle(color: Colors.white),
                  ),
                  trailing: isSelected
                      ? const Icon(Icons.check, color: Colors.blue)
                      : null,
                  onTap: () => _toggleLabel(label),
                );
              },
            ),
          ),
      ],
    );
  }

  Widget _buildCreateNewLabelItem() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        border: Border(top: BorderSide(color: Colors.grey.shade700)),
      ),
      child: Column(
        children: [
          TextFormField(
            controller: _newLabelController,
            decoration: const InputDecoration(
              border: OutlineInputBorder(),
              hintText: 'Create new label...',
              hintStyle: TextStyle(color: Colors.white54),
              contentPadding: EdgeInsets.symmetric(
                horizontal: 12,
                vertical: 12,
              ),
            ),
            style: const TextStyle(color: Colors.white),
          ),
          const SizedBox(height: 12),
          Row(
            mainAxisAlignment: MainAxisAlignment.end,
            children: [
              TextButton(
                onPressed: () {
                  setState(() {
                    _showCreateNew = false;
                    _newLabelController.clear();
                  });
                },
                child: const Text('Cancel'),
              ),
              const SizedBox(width: 8),
              ElevatedButton(
                onPressed: _createNewLabel,
                child: const Text('Create'),
              ),
            ],
          ),
        ],
      ),
    );
  }
}
