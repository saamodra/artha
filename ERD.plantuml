@startuml Artha_ERD

!define PRIMARY_KEY(x) <b><color:#b8861b><&key></color> x</b>
!define FOREIGN_KEY(x) <color:#aaaaaa><&key></color> x
!define UNIQUE(x) <color:#222222><u>x</u></color>
skinparam linetype ortho

entity "auth.users" as auth_users {
  PRIMARY_KEY(id) : UUID
  UNIQUE(email) : VARCHAR(255)
  encrypted_password : VARCHAR(255)
  created_at : TIMESTAMPTZ
  --
  <i>Managed by Supabase Auth</i>
}

entity "profiles" as profiles {
  PRIMARY_KEY(id) : UUID
  FOREIGN_KEY(id) : UUID
  UNIQUE(username) : VARCHAR(255)
  full_name : VARCHAR(255)
  avatar_url : TEXT
  created_at : TIMESTAMPTZ
  updated_at : TIMESTAMPTZ
}

entity "wallets" as wallets {
  PRIMARY_KEY(id) : UUID
  FOREIGN_KEY(user_id) : UUID
  name : VARCHAR(255)
  wallet_type : VARCHAR(50)
  color : BIGINT
  initial_value : DECIMAL(15,2)
  account_number : VARCHAR(255)
  account_type : VARCHAR(100)
  asset_type : VARCHAR(50)
  display_order : INTEGER
  created_at : TIMESTAMPTZ
}

entity "categories" as categories {
  PRIMARY_KEY(id) : UUID
  name : VARCHAR(255)
  created_at : TIMESTAMPTZ
}

entity "labels" as labels {
  PRIMARY_KEY(id) : UUID
  FOREIGN_KEY(user_id) : UUID
  name : VARCHAR(255)
  color : BIGINT
  created_at : TIMESTAMPTZ
}

entity "wallet_records" as wallet_records {
  PRIMARY_KEY(id) : UUID
  record_type : VARCHAR(50)
  FOREIGN_KEY(category_id) : UUID
  FOREIGN_KEY(wallet_id) : UUID
  FOREIGN_KEY(transfer_to_wallet_id) : UUID
  amount : DECIMAL(15,2)
  date_time : TIMESTAMPTZ
  note : TEXT
}

entity "templates" as templates {
  PRIMARY_KEY(id) : UUID
  FOREIGN_KEY(user_id) : UUID
  name : VARCHAR(255)
  record_type : VARCHAR(50)
  FOREIGN_KEY(category_id) : UUID
  FOREIGN_KEY(wallet_id) : UUID
  FOREIGN_KEY(transfer_to_wallet_id) : UUID
  amount : DECIMAL(15,2)
  note : TEXT
  created_at : TIMESTAMPTZ
}

entity "template_labels" as template_labels {
  PRIMARY_KEY(id) : UUID
  FOREIGN_KEY(template_id) : UUID
  FOREIGN_KEY(label_id) : UUID
  created_at : TIMESTAMPTZ
}

entity "wallet_record_labels" as wallet_record_labels {
  PRIMARY_KEY(id) : UUID
  FOREIGN_KEY(wallet_record_id) : UUID
  FOREIGN_KEY(label_id) : UUID
  created_at : TIMESTAMPTZ
}

entity "debts" as debts {
  PRIMARY_KEY(id) : UUID
  FOREIGN_KEY(user_id) : UUID
  debt_type : VARCHAR(50)
  name : VARCHAR(255)
  description : TEXT
  FOREIGN_KEY(wallet_id) : UUID
  original_amount : DECIMAL(15,2)
  current_amount : DECIMAL(15,2)
  date_created : TIMESTAMPTZ
  due_date : TIMESTAMPTZ
}

entity "debt_records" as debt_records {
  PRIMARY_KEY(id) : UUID
  FOREIGN_KEY(debt_id) : UUID
  action : VARCHAR(50)
  FOREIGN_KEY(wallet_id) : UUID
  amount : DECIMAL(15,2)
  date_time : TIMESTAMPTZ
  note : TEXT
}

' Relationships
auth_users ||--|| profiles : "extends"
auth_users ||--o{ wallets : "owns"
auth_users ||--o{ debts : "has"
auth_users ||--o{ labels : "creates"
auth_users ||--o{ templates : "creates"
wallets ||--o{ wallet_records : "has transactions"
wallets ||--o{ templates : "default wallet"
wallets ||--o{ debts : "associated with"
wallets ||--o{ debt_records : "used in"
debts ||--o{ debt_records : "has actions"
debt_records ||--|| wallet_records : "creates"
categories ||--o{ wallet_records : "categorizes"
categories ||--o{ templates : "categorizes"
wallet_records ||--o{ wallet_record_labels : "has"
labels ||--o{ wallet_record_labels : "tagged in"
templates ||--o{ template_labels : "has"
labels ||--o{ template_labels : "tagged in"

' Notes
note right of auth_users
  **Supabase Managed Table**
  - Authentication handled by Supabase
  - Do NOT modify this table directly
  - Use Supabase Auth API
end note

note right of profiles
  **User Profile Extension**
  - Extends auth.users with custom data
  - Auto-created via trigger on signup
  - Stores additional user information
end note

note right of wallets
  **Enums:**
  - wallet_type: manualInput, investment
  - asset_type: stocks, crypto

  **Constraint:**
  UNIQUE (user_id, name)
end note

note right of categories
  **Constraint:**
  UNIQUE (name)
end note

note right of labels
  **Constraint:**
  UNIQUE (user_id, name)

  **Usage:**
  Many-to-many with wallet_records
end note

note right of wallet_records
  **Enums:**
  - record_type: income, expense, transfer

  **Constraint:**
  wallet_id != transfer_to_wallet_id
  (for transfer type)
end note

note right of templates
  **Enums:**
  - record_type: income, expense, transfer

  **Constraint:**
  UNIQUE (user_id, name)

  **Usage:**
  Quick creation of repeated records
end note

note right of template_labels
  **Junction Table:**
  Many-to-many relationship

  **Constraint:**
  UNIQUE (template_id, label_id)
end note

note right of wallet_record_labels
  **Junction Table:**
  Many-to-many relationship

  **Constraint:**
  UNIQUE (wallet_record_id, label_id)
end note

note right of debts
  **Enums:**
  - debt_type: iLent, iOwe

  **Computed:**
  - is_overdue
  - is_paid
  - paid_amount
  - paid_percentage
end note

note right of debt_records
  **Enums:**
  - action: repay, increaseDebt

  **Side Effect:**
  Creates wallet_record
  automatically
end note

@enduml
